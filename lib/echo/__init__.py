# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/echo.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterator,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class EchoRequest(betterproto.Message):
    value: str = betterproto.string_field(1)
    extra_times: int = betterproto.uint32_field(2)
    """Number of extra times to echo"""


@dataclass(eq=False, repr=False)
class EchoResponse(betterproto.Message):
    values: List[str] = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class EchoStreamResponse(betterproto.Message):
    value: str = betterproto.string_field(1)


class EchoStub(betterproto.ServiceStub):
    async def echo(
        self,
        echo_request: "EchoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "EchoResponse":
        return await self._unary_unary(
            "/echo.Echo/Echo",
            echo_request,
            EchoResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def echo_stream(
        self,
        echo_request: "EchoRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["EchoStreamResponse"]:
        async for response in self._unary_stream(
            "/echo.Echo/EchoStream",
            echo_request,
            EchoStreamResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class EchoBase(ServiceBase):
    async def echo(self, echo_request: "EchoRequest") -> "EchoResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def echo_stream(
        self, echo_request: "EchoRequest"
    ) -> AsyncIterator["EchoStreamResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_echo(
        self, stream: "grpclib.server.Stream[EchoRequest, EchoResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.echo(request)
        await stream.send_message(response)

    async def __rpc_echo_stream(
        self, stream: "grpclib.server.Stream[EchoRequest, EchoStreamResponse]"
    ) -> None:
        request = await stream.recv_message()
        await self._call_rpc_handler_server_stream(
            self.echo_stream,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/echo.Echo/Echo": grpclib.const.Handler(
                self.__rpc_echo,
                grpclib.const.Cardinality.UNARY_UNARY,
                EchoRequest,
                EchoResponse,
            ),
            "/echo.Echo/EchoStream": grpclib.const.Handler(
                self.__rpc_echo_stream,
                grpclib.const.Cardinality.UNARY_STREAM,
                EchoRequest,
                EchoStreamResponse,
            ),
        }
