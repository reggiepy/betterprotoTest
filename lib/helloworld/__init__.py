# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/helloworld.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class HelloRequest(betterproto.Message):
    """简单请求"""

    name: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class HelloResponse(betterproto.Message):
    """简单响应"""

    message: str = betterproto.string_field(1)


class GreeterStub(betterproto.ServiceStub):
    async def say_hello(
        self,
        hello_request: "HelloRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "HelloResponse":
        return await self._unary_unary(
            "/helloworld.Greeter/SayHello",
            hello_request,
            HelloResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class GreeterBase(ServiceBase):
    async def say_hello(self, hello_request: "HelloRequest") -> "HelloResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_say_hello(
        self, stream: "grpclib.server.Stream[HelloRequest, HelloResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.say_hello(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/helloworld.Greeter/SayHello": grpclib.const.Handler(
                self.__rpc_say_hello,
                grpclib.const.Cardinality.UNARY_UNARY,
                HelloRequest,
                HelloResponse,
            ),
        }
